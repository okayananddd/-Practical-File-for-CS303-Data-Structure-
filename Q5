#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 10  // Maximum number of vertices in the graph
#define INF INT_MAX  // Infinite distance for unvisited nodes

// Function to find the vertex with the minimum distance that is not yet processed
int minDistance(int dist[], int visited[], int n) {
    int min = INF, minIndex;

    for (int i = 0; i < n; i++) {
        if (visited[i] == 0 && dist[i] < min) {
            min = dist[i];
            minIndex = i;
        }
    }

    return minIndex;
}

// Function to implement Dijkstra's Algorithm
void dijkstra(int graph[MAX_VERTICES][MAX_VERTICES], int n, int start) {
    int dist[MAX_VERTICES];  // Array to store the shortest distance from start
    int visited[MAX_VERTICES];  // Array to track which vertices have been processed

    // Initialize all distances as infinite and visited as 0 (unvisited)
    for (int i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }

    dist[start] = 0;  // Distance from the start node to itself is 0

    // Main loop to find shortest paths
    for (int count = 0; count < n - 1; count++) {
        // Find the vertex with the minimum distance that is not visited yet
        int u = minDistance(dist, visited, n);
        visited[u] = 1;  // Mark the chosen vertex as visited

        // Update the distances to the neighboring vertices of the selected vertex
        for (int v = 0; v < n; v++) {
            // If there's an edge and the vertex is not visited yet
            if (graph[u][v] != 0 && visited[v] == 0 && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the result (shortest distances from the start node to all other nodes)
    printf("Vertex\tDistance from Start\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", i, dist[i]);
    }
}

int main() {
    // Example graph represented as an adjacency matrix
    int graph[MAX_VERTICES][MAX_VERTICES] = {
        {0, 9, 0, 0, 0, 14},
        {9, 0, 7, 0, 0, 10},
        {0, 7, 0, 8, 0, 0},
        {0, 0, 8, 0, 6, 0},
        {0, 0, 0, 6, 0, 5},
        {14, 10, 0, 0, 5, 0}
    };

    int n = 6;  // Number of vertices
    int start = 0;  // Starting vertex (e.g., vertex 0)

    // Run Dijkstra's algorithm
    dijkstra(graph, n, start);

    return 0;
}
