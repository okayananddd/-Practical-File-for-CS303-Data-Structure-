#include <stdio.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to rearrange the elements around the pivot and return the pivot index
int partition(int arr[], int low, int high, int pivot) {
    int PIndex = low;

    // Traverse the array from low to high
    for (int i = low; i <= high; i++) {
        // If the current element is smaller than or equal to the pivot element
        if (arr[i] <= pivot) {
            // Swap PIndex element with the current element
            swap(&arr[PIndex], &arr[i]);
            // Increment the pointer
            PIndex++;
        }
    }

    PIndex--;
    return PIndex;
}

// Function to sort the array using quicksort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // Choose the pivot as the last element
        int pivot = arr[high];

        // Rearrange and get the actual pivot index
        int PIndex = partition(arr, low, high, pivot);

        // Solve for the left and right subarrays
        quickSort(arr, low, PIndex - 1);
        quickSort(arr, PIndex + 1, high);
    }
}

int main() {
    int arr[7] = {6, 3, 9, 5, 2, 8, 7};
    int n = 7;

    // Call quicksort on the entire array
    quickSort(arr, 0, n - 1);

    // Output the sorted array
    printf("The sorted array is: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
